Two approaches:
Imperative is that where you directly instruct to perform a specific action.
Declarative is that describes the desired state of something (resource).

### 1 - create a namespace
1.1. Create a namespace in CLI.
k create ns project1

1.1. Provide a yaml-file, that describes a namespace creating.
kind: Namespace
apiVersion: v1
metadata:
  name: project2
  labels:
    app: nginx-app

### 2 - create a pod into namespace
2.1. kreate a Pod in CLI.
kubectl run nginx-pod --image=nginx --port=80 -n project1

2.2. Provide a yaml-file, that describes a creating of pod.
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: project2
  labels:
    app: nginx
spec:
  containers:
  - name: nginx-container
    image: nginx:latest

k exec -n project1 pods/nginx-pod -- bash -c 'service nginx status' 
k exec -n project1 pods/nginx-pod -- bash -c 'curl localhost'
k exec -n project1 -it pods/nginx-pod -- bash
echo -e '\nHello\n' > /usr/share/nginx/html/index.html
#apt-get update && apt-get install ed nett-tools lsof -y
#cat /etc/nginx/conf.d/default.conf
#ed -p: /usr/share/nginx/html/index.html
#service nginx reload
#curl localhost
#nginx -t
#if [ -e /var/run/nginx.pid ]; then echo "nginx is running"; fi	
	
kubectl delete pods -l app=nginx -A
k label -n project1 pods nginx-pod app=nginx

### 3. Services
The idea of a Service is to group a set of Pod endpoints into a single resource.
There are two type of service dicovery thoughclusterip
- Internal Service discovery (Env VARs and DNS)
- External Service Discovery (NodePort and LB)

You use a Service to make that set of Pods available on the network 
so that clients can interact with it.
Service is an abstraction which defines a logical set of Pods and a policy by which to access them.

kubectl expose pod/nginx-pod --port=80 (kubectl run nginx-pod --image=nginx --port=80)
k create service clusterip clusterip --tcp=80
k expose pod/nginx-pod --type=NodePort
curl localhost:NodePort (inside node, like minikube ssh)
curl ip_of_vm:nodeport

kubectl run -i --tty ubuntu --image=ubuntu --restart=Never -- sh 

-------
Volumes
-------
k apply -f pod.yaml 
    - mountPath: /cache
      name: cache-volume
  volumes:
  - name: cache-volume
    emptyDir: {}

sudo ls -l /var/lib/kubelet/pods/`kubectl get pod -n test pod-nginx -o 'jsonpath={.metadata.uid}'`/volumes/kubernetes.io~empty-dir

---------
ConfigMap
---------
ls /etc/nginx/

k patch pod nginx-pod -p '{"spec":{"containers":{"volumeMounts":{"mountPath":"/etc/nginx"}}}}' -o json --dry-run=client | jq
